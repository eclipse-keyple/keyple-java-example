import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter

///////////////////////////////////////////////////////////////////////////////
//  GRADLE CONFIGURATION
///////////////////////////////////////////////////////////////////////////////
plugins {
    java
    id("com.diffplug.spotless") version "6.25.0"
}
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.eclipse.keyple:keyple-gradle:0.2.+") { isChanging = true }
    }
}
apply(plugin = "org.eclipse.keyple")

///////////////////////////////////////////////////////////////////////////////
//  APP CONFIGURATION
///////////////////////////////////////////////////////////////////////////////
repositories {
    mavenLocal()
    mavenCentral()
    maven(url = "https://oss.sonatype.org/content/repositories/snapshots")
}
dependencies {
// Begin Keyple configuration (generated by 'https://keyple.org/components/overview/configuration-wizard/')
    implementation("org.eclipse.keypop:keypop-reader-java-api:2.0.1")
    implementation("org.eclipse.keypop:keypop-calypso-card-java-api:2.1.2")
    implementation("org.eclipse.keypop:keypop-calypso-crypto-legacysam-java-api:0.7.0")
    implementation("org.eclipse.keyple:keyple-common-java-api:2.0.1")
    implementation("org.eclipse.keyple:keyple-util-java-lib:2.4.0")
    implementation("org.eclipse.keyple:keyple-service-java-lib:3.3.5")
    implementation("org.eclipse.keyple:keyple-service-resource-java-lib:3.1.0")
    implementation("org.eclipse.keyple:keyple-card-calypso-java-lib:3.1.7")
    implementation("org.eclipse.keyple:keyple-card-calypso-crypto-legacysam-java-lib:0.9.0")
    implementation("org.eclipse.keyple:keyple-card-calypso-crypto-pki-java-lib:0.2.1")
    implementation("org.eclipse.keyple:keyple-plugin-pcsc-java-lib:2.4.2")
    implementation("org.eclipse.keyple:keyple-plugin-stub-java-lib:2.2.1")
// End Keyple configuration

    implementation("org.slf4j:slf4j-simple:1.7.32")
    implementation("com.google.code.gson:gson:2.10.1")
}

val javaSourceLevel: String by project
val javaTargetLevel: String by project
java {
    sourceCompatibility = JavaVersion.toVersion(javaSourceLevel)
    targetCompatibility = JavaVersion.toVersion(javaTargetLevel)
    println("Compiling Java $sourceCompatibility to Java $targetCompatibility.")
}

val buildTimeAndDate = OffsetDateTime.now()
val buildDate = DateTimeFormatter.ISO_LOCAL_DATE.format(buildTimeAndDate)
val buildTime = DateTimeFormatter.ofPattern("HH:mm:ss.SSSZ").format(buildTimeAndDate)

///////////////////////////////////////////////////////////////////////////////
//  TASKS CONFIGURATION
///////////////////////////////////////////////////////////////////////////////
tasks {
    spotless {
        java {
            target("src/**/*.java")
            licenseHeaderFile("${project.rootDir}/LICENSE_HEADER")
            importOrder("java", "javax", "org", "com", "")
            removeUnusedImports()
            googleJavaFormat()
        }
    }
    register("fatJarTN313", Jar::class.java) {
        archiveClassifier.set("TN313-fat")
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        manifest {
            attributes(
                "Main-Class" to "org.eclipse.keyple.card.calypso.example.UseCase10_SessionTrace_TN313.Main_SessionTrace_TN313_Pcsc",
                "Created-By" to "${System.getProperty("java.version")} (${System.getProperty("java.vendor")} ${
                    System.getProperty(
                        "java.vm.version"
                    )
                })",
                "Build-Date" to buildDate,
                "Build-Time" to buildTime,
                "Specification-Title" to project.name,
                "Implementation-Version" to project.version,
                "Bundle-Name" to project.name,
                "Bundle-Description" to project.description
            )
        }
        from(configurations.runtimeClasspath.get()
            .onEach { println("add from dependencies: ${it.name}") }
            .map { if (it.isDirectory) it else zipTree(it) })
        val sourcesMain = sourceSets.main.get()
        sourcesMain.allSource.forEach { println("add from sources: ${it.name}") }
        from(sourcesMain.output)
    }
    register("fatJarPerfEmbeddedValidation", Jar::class.java) {
        archiveClassifier.set("PerfEmbeddedValidation-fat")
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        manifest {
            attributes(
                "Main-Class" to "org.eclipse.keyple.card.calypso.example.UseCase12_PerformanceMeasurement_EmbeddedValidation.Main_PerformanceMeasurement_EmbeddedValidation_Pcsc",
                "Created-By" to "${System.getProperty("java.version")} (${System.getProperty("java.vendor")} ${
                    System.getProperty(
                        "java.vm.version"
                    )
                })",
                "Build-Date" to buildDate,
                "Build-Time" to buildTime,
                "Specification-Title" to project.name,
                "Implementation-Version" to project.version,
                "Bundle-Name" to project.name,
                "Bundle-Description" to project.description
            )
        }
        from(configurations.runtimeClasspath.get()
            .onEach { println("add from dependencies: ${it.name}") }
            .map { if (it.isDirectory) it else zipTree(it) })
        val sourcesMain = sourceSets.main.get()
        sourcesMain.allSource.forEach { println("add from sources: ${it.name}") }
        from(sourcesMain.output)
    }
    register("fatJarPerfDistributedReloading", Jar::class.java) {
        archiveClassifier.set("PerfDistributedReloading-fat")
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        manifest {
            attributes(
                "Main-Class" to "org.eclipse.keyple.card.calypso.example.UseCase13_PerformanceMeasurement_DistributedReloading.Main_PerformanceMeasurement_DistributedReloading_Pcsc",
                "Created-By" to "${System.getProperty("java.version")} (${System.getProperty("java.vendor")} ${
                    System.getProperty(
                        "java.vm.version"
                    )
                })",
                "Build-Date" to buildDate,
                "Build-Time" to buildTime,
                "Specification-Title" to project.name,
                "Implementation-Version" to project.version,
                "Bundle-Name" to project.name,
                "Bundle-Description" to project.description
            )
        }
        from(configurations.runtimeClasspath.get()
            .onEach { println("add from dependencies: ${it.name}") }
            .map { if (it.isDirectory) it else zipTree(it) })
        val sourcesMain = sourceSets.main.get()
        sourcesMain.allSource.forEach { println("add from sources: ${it.name}") }
        from(sourcesMain.output)
    }
}